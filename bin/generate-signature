#!/bin/bash -e
# Copyright (c) 2011-2020 TurnKey GNU/Linux - http://www.turnkeylinux.org
# 
# This file is part of buildtasks.
# 
# Buildtasks is free software; you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.


fatal() { echo "FATAL [$(basename $0)]: $@" 1>&2; exit 1; }
info() { echo "INFO [$(basename $0)]: $@"; }

usage() {
cat<<EOF
Syntax: $0 filepath
Generate hash for filepath (e.g., path/to/iso)

Arguments::

    filepath        - path to file to be signed

Environment::

    RELEASE         - RELEASE to build for in the format DISTRO/CODENAME.
                      If not set, defaults to host system.
                      Example: debian/buster
EOF
exit 1
}

if [[ "$#" != "1" ]]; then
    usage
fi

filepath=$1
filename=$(basename $1)

# if release not set, assume same as host
RELEASE=${RELEASE:-debian/$(lsb_release -sc)}
CODENAME=$(basename $RELEASE)

info "generating sha256sum hash"
SHA256SUM="$(sha256sum $filepath | cut -d " " -f 1)  $filename"

info "generating sha512sum hash"
SHA512SUM="$(sha512sum $filepath | cut -d " " -f 1)  $filename"

TKL_KEY=tkl-$CODENAME-piturnkey.asc
KEY_EMAIL=yheneaul@gmail.com
# first try local common
if [[ -f "$FAB_PATH/common/keys/$TKL_KEY" ]]; then
    GET_KEY_COM="cat $FAB_PATH/common/keys/$TKL_KEY"
else
    # set BRANCH - default to master
    BRANCH=${BRANCH:-master}
    KEY_URL=https://raw.githubusercontent.com/turnkeylinux/common/$BRANCH/keys/$TKL_KEY
    GET_KEY_COM="curl $KEY_URL"
fi
TMP_KEYRING=/tmp/temp.gpg
GPG_COMMAND="gpg --no-default-keyring --keyring $TMP_KEYRING"
$GET_KEY_COM | $GPG_COMMAND --import
GPG_LISTKEYS=$($GPG_COMMAND --list-keys --with-fingerprint $KEY_EMAIL | sed "s|^|      |g")
UID_INFO=$($GPG_COMMAND --with-colons --fingerprint $KEY_EMAIL | grep $KEY_EMAIL | sed "s|^.*::\(.*\):$|\1|")
FINGERPRINT=$($GPG_COMMAND --with-colons --fingerprint $KEY_EMAIL | awk -F: '$1 == "fpr" {print $10;}' | head -1)

info "writing hash file"
cat > $filepath.hash <<EOF
To ensure the image has not been corrupted in transmit or tampered with,
perform the following two steps to cryptographically verify image integrity:

1. Verify the authenticity of this file by checking that it is signed with our
   GPG release key:

    $ curl $KEY_URL | gpg --import
    $ gpg --list-keys --with-fingerprint $KEY_EMAIL
$GPG_LISTKEYS
    $ gpg --verify $filename.hash
      gpg: Signature made using RSA key ID $FINGERPRINT
      gpg: Good signature from "$UID_INFO"

2. Recalculate the image hash and make sure it matches your choice of hash below.

    $ sha256sum $filename
      $SHA256SUM

    $ sha512sum $filename
      $SHA512SUM

   Note, you can compare hashes automatically::

    $ sha256sum -c $filename.hash
      $filename: OK

    $ sha512sum -c $filename.hash
      $filename: OK

    Final note, when checking SHAs automatically, please ignore warning noting that some lines are improperly formatted.

EOF
rm -f $TMP_KEYRING*
